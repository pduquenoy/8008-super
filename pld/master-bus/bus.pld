/* Original by Jim Loos. Modified by smbaker for H8 project */

Name bus;
Partno G22V10#1;
Revision;
Date 09/1/2023;
Designer Scott Baker;
Company ;
Location ;
Assembly 8008 Supercomputer Master;
Device G22V10;

/* Inputs: */
Pin 1 = S0;         /* state signal from 8008 pin 13        */
Pin 2 = S1;         /* state signal from 8008 pin 12        */
Pin 3 = S2;         /* state signal from 8008 pin 11        */
Pin 4 = SYNC;       /* SYNC signal from 8008 pin 14         */
Pin 5 = CC1;        /* control code from 74LS273 #2 pin 5   */
Pin 6 = CC2;        /* control code from 74LS273 #2 pin 2   */
Pin 7 = A12;  /* was NC4 */
Pin 8 = A13;  /* was NC0 */
Pin 9 = NC1;
Pin 10 = PHASE2;    /* PHASE2 clock input                   */
Pin 11 = !EXT_CS;
Pin 13 = NC3;

/* Outputs:   */
Pin 23 = !RUNNING;   /* Output to "Running" LED  ... was !RUNNING            */ 
Pin 22 = ALL;        /* 74LS273 #1 Address Latch Low strobe  */
Pin 21 = ALH;        /* 74LS273 #2 Address Latch High strobe */
Pin 20 = !MEMRD;     /* Memory Read strobe                   */
Pin 19 = !MEMWR;     /* Memory Write strobe                  */
Pin 18 = !IORD;      /* IO Read to IO PLD                    */
Pin 17 = !IOWR;      /* IO Write to IO PLD                   */
Pin 16 = !EXT_WRP;   /* Interrupt Ack to int controller PLD  */
Pin 15 = LOSTIT;     /* Simulated M1 signal                  */
Pin 14 = DBD;        /* 74LS245 Data Bus Direction control   */

/* states */
t1      = !S2 &  S1 & !S0;      /* lower 8 bits of address out              */
t1i     =  S2 &  S1 & !S0;      /* CPU interrupted                          */
t2      =  S2 & !S1 & !S0;      /* higher 6 bits address, 2 bits control out*/    
wait    = !S2 & !S1 & !S0;      /* external memory not ready                */
t3      = !S2 & !S1 &  S0;      /* instruction or data fetch or data out    */
stopped = !S2 &  S1 &  S0;      /* halt instruction received by CPU         */
t4      =  S2 &  S1 &  S0;      /* execution of instruction                 */
t5      =  S2 & !S1 &  S0;      /* execution of instruction                 */

RUNNING = !stopped;

/* cycle types... */
pci = !CC1 & !CC2;            /* Memory Read Instruction */
pcr = !CC1 &  CC2;            /* Memory Read Additional */
pcc =  CC1 & !CC2;            /* I/O Operation */
pcw =  CC1 &  CC2;            /* Memory Write */

/* Input/Output logic: */
in0  = !A13 & !A12;
out0 = !A13 &  A12;
out1 =  A13 & !A12;
out2 =  A13 &  A12;

/* address and data bus */
DBD = (t1 # t1i # t2 # t3) & !SYNC;
ALL  = (t1 # t1i) & !SYNC & PHASE2;
ALH  = t2 & !SYNC & PHASE2;

/* memory and I/O strobes */
MEMRD = t3 & (pci # pcr) & SYNC;
MEMWR = t3 & pcw & !SYNC & PHASE2;

/* Set EXT_WRP ahead of the eventual MEMWR that will occur. This is used
 * by blaster when we want to take all blasters on write. It will be gated by
 * blaster by EXT_CS, so there's no need to factor in EXT_CS here.
 *
 * Write cycle occurs during T3 and PCW when SYNC is low. MW is toggled during
 * this cycle when the O2 clock is high. EXT_WRP should come on before the O2
 * clock
 */

EXT_WRP = t3 & pcw & !SYNC;

/* LOSTIT simulates a flipflop that is true if SYNC is released during IO Read and persists until the end of T3 */
LOSTIT = (IORD & !SYNC) # (LOSTIT & t3);
/* LOSTIT = (IOWR & SYNC) # (IORD & !SYNC) # (LOSTIT & t3);    idea... */

/* Note: If you don't guard IORD and IOWR with in0 and out0/out1/out2 then you will
 *       get spurious IORD and IOWR pulses.
 */

IORD = t3 & pcc & SYNC & (!LOSTIT) & in0;
IOWR = t3 & pcc & !SYNC & PHASE2 & (out0 # out1 # out2);

/* 
 * INTACK = t1i & !SYNC & PHASE2;
 * M1 = t3 & pci & SYNC;
 */

